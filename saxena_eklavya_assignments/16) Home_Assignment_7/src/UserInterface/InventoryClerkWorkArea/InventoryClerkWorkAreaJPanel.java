/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InventoryClerkWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PharmacyOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.VaccinationRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author eklav
 */
public class InventoryClerkWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
//    private PharmacyOrganization labOrganization;
    private Enterprise enterprise;
    private Network network;
    /**
     * Creates new form InventoryClerkWorkAreaJPanel
     */
    public InventoryClerkWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise, Network network,EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.enterprise = enterprise;
//        this.labOrganization = (PharmacyOrganization)organization;
        this.network = network;
        
        try{
            populateNetworkRequests();
            populateTable();
        }
        catch(Exception e){
            System.out.println("Network Reuest not there");
            
        }
    }
    
    public void populateNetworkRequests() {
        DefaultTableModel model = (DefaultTableModel)networkWorkRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : business.getWorkQueue().getWorkRequestList()){
            if(business.getEnterprise(request.getWorkRequestSender())!=enterprise){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getQuantity();
                String sender = business.getEnterprise(userAccount).getName()+","+business.getNetwork(userAccount);
                row[2] = sender;
                row[3] = request.getWorkRequestReceiver() == null ? null : request.getWorkRequestReceiver().getEmployee().getEmployeeName();
                row[4] = request.getWorkRequestStatus();

                model.addRow(row);
            }
            
        }
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : network.getWorkQueue().getWorkRequestList()){
            if(business.getEnterprise(request.getWorkRequestSender()).getEnterpriseType()!=Enterprise.EnterpriseType.StatelliteClinicEnterprise){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getQuantity();
                row[2] = request.getWorkRequestSender();

                row[3] = request.getWorkRequestReceiver() == null ? null : request.getWorkRequestReceiver().getEmployee().getEmployeeName();
                if(business.getEnterprise(request.getWorkRequestReceiver())!=enterprise){
                    String receiver = business.getEnterprise(request.getWorkRequestReceiver()).getName()+","+business.getNetwork(userAccount);
                    row[3] = receiver;
                }
                else{
                    row[3] = request.getWorkRequestReceiver();
                }
                row[4] = request.getWorkRequestStatus();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        reqNetworkjButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        networkWorkRequestJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        networkAssignJButton = new javax.swing.JButton();
        refreshJButton1 = new javax.swing.JButton();
        networkProcessJButton = new javax.swing.JButton();
        lblWelcome = new javax.swing.JLabel();

        jLabel2.setText("Vaccine Request from Network");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine", "Quantity", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        reqNetworkjButton.setText("Request Network");
        reqNetworkjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqNetworkjButtonActionPerformed(evt);
            }
        });

        networkWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine", "Quantity", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(networkWorkRequestJTable);
        if (networkWorkRequestJTable.getColumnModel().getColumnCount() > 0) {
            networkWorkRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            networkWorkRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            networkWorkRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            networkWorkRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            networkWorkRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel3.setText("Vaccine Request from Ecosystem");

        networkAssignJButton.setText("Assign to me");
        networkAssignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkAssignJButtonActionPerformed(evt);
            }
        });

        refreshJButton1.setText("Refresh");
        refreshJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButton1ActionPerformed(evt);
            }
        });

        networkProcessJButton.setText("Process");
        networkProcessJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkProcessJButtonActionPerformed(evt);
            }
        });

        lblWelcome.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblWelcome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWelcome.setText("Inventory Clerk Work Area");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(networkAssignJButton)
                        .addGap(18, 18, 18)
                        .addComponent(refreshJButton1)
                        .addGap(18, 18, 18)
                        .addComponent(networkProcessJButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblWelcome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(assignJButton)
                                .addGap(18, 18, 18)
                                .addComponent(refreshJButton)
                                .addGap(18, 18, 18)
                                .addComponent(processJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(reqNetworkjButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblWelcome)
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(processJButton)
                    .addComponent(refreshJButton)
                    .addComponent(reqNetworkjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkAssignJButton)
                    .addComponent(networkProcessJButton)
                    .addComponent(refreshJButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setWorkRequestReceiver(userAccount);
        request.setWorkRequestStatus("Pending");
        try{
            populateNetworkRequests();
            populateTable();
        }
        catch(Exception e){
            System.out.println("Network Reuest not there");

        }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        VaccinationRequest request = (VaccinationRequest)workRequestJTable.getValueAt(selectedRow, 0);

        request.setWorkRequestStatus("Processing");

        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void reqNetworkjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqNetworkjButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        VaccinationRequest request = (VaccinationRequest)workRequestJTable.getValueAt(selectedRow, 0);

        request.setWorkRequestStatus("Request Sent to Network");
        request.setWorkRequestSender(userAccount);
        business.getWorkQueue().addWorkRequest(request);
        try{
            populateNetworkRequests();
            populateTable();
        }
        catch(Exception e){
            System.out.println("Network Reuest not there");

        }

    }//GEN-LAST:event_reqNetworkjButtonActionPerformed

    private void networkAssignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkAssignJButtonActionPerformed
        int selectedRow = networkWorkRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        WorkRequest request = (WorkRequest)networkWorkRequestJTable.getValueAt(selectedRow, 0);
        request.setWorkRequestReceiver(userAccount);
        request.setWorkRequestStatus("Pending");
        try{
            populateNetworkRequests();
            populateTable();
        }
        catch(Exception e){
            System.out.println("Network Reuest not there");

        }
    }//GEN-LAST:event_networkAssignJButtonActionPerformed

    private void refreshJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshJButton1ActionPerformed

    private void networkProcessJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkProcessJButtonActionPerformed
        int selectedRow = networkWorkRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        VaccinationRequest request = (VaccinationRequest)networkWorkRequestJTable.getValueAt(selectedRow, 0);

        request.setWorkRequestStatus("Processing");

        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_networkProcessJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JButton networkAssignJButton;
    private javax.swing.JButton networkProcessJButton;
    private javax.swing.JTable networkWorkRequestJTable;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton refreshJButton1;
    private javax.swing.JButton reqNetworkjButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
