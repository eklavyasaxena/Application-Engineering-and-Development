/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.pharmacistRole;

import userinterface.InventoryClerk.*;
import Business.Customer.ChildPortfolio;
import Business.Customer.VaccineAdministered;
import Business.DiseasesDrugs.Vaccination;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Inventory.InventoryItem;
import Business.Network.Network;
import Business.Organization.InventoryClerkOrganization;
import Business.Organization.Organization;
import Business.Organization.PharmacistOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class InventoryManagementPharmasistWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private PharmacistOrganization labOrganization;
    private Enterprise enterprise;
    private Network network;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public InventoryManagementPharmasistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise, Network network,EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.enterprise = enterprise;
        this.labOrganization = (PharmacistOrganization)organization;
        this.network = network;
        
        try{
            populateChildrencoming();
            populateinventoryTable();
            
        }
        catch(Exception e){
            System.out.println("Empty Inventory not there");
            
        }
        try{
            populateVaccineDropDown();
            
        }
        catch(Exception e){
            System.out.println("Empty Vaccine List not there");
            
        }
        
    }
    public void populateVaccineDropDown(){
       
    }
    public void populateChildrencoming(){
       DefaultTableModel model = (DefaultTableModel)childJTable.getModel();
        
        model.setRowCount(0);
        for(Vaccination vac : business.getVaccinationDirectory().getvaccinationDirectory()){
            Object[] row = new Object[13];
            row[0] = vac.getName();
            Date now = new Date();
            for(int i=1;i<13;i++){
                int count = 0;
                for(ChildPortfolio cp : business.getChildDirectory().getChildPortfolioList()){
                    for(VaccineAdministered vad : cp.getVaccineHistoryCard().getVaccineAdministeredList()){
                        if(vad.getVaccination().getName().compareTo(vac.getName())==0){
                            if(vad.getVaccineDueDate().getYear()==now.getYear()){
                                if(vad.getVaccineDueDate().getMonth()==i){
                                count++;
                                }
                            }
                            
                        }
                        
                    }
                }
                
                System.out.println(count);
                row[i] = String.valueOf(count);
                
            }
            model.addRow(row);
        }
    }
    public void populateinventoryTable() {
        DefaultTableModel model = (DefaultTableModel)inverntoryJTable.getModel();
        
        model.setRowCount(0);
        Enterprise ent = business.getEnterprise(business.getCurrentUser());
        for(InventoryItem inventoryItem : ent.getInventoryDirectory().getInventoryDirectory()){
                Object[] row = new Object[7];
                row[0] = inventoryItem;
                row[1] = inventoryItem.getVacination().getName();
                row[2] = inventoryItem.getVacination().getManufacturingDate();
                row[3] = inventoryItem.getVacination().getExpiryDate();
                row[4] = inventoryItem.getVacination().getBatchNo();
                row[5] = String.valueOf(inventoryItem.getProducedReceivedQuantity());
                row[6] = String.valueOf(inventoryItem.getQuantity());
                row[7] = inventoryItem.getEnterprise().getName();
                model.addRow(row);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        inverntoryJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deleteJButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        childJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(229, 229, 229));

        inverntoryJTable.setBackground(new java.awt.Color(255, 203, 203));
        inverntoryJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        inverntoryJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Vaccine Id", "Vaccine Name", "Manufacturign Date", "Expiry Date", "Batch Number", "Inital Quantity", "Quantity", "Manufacure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inverntoryJTable);
        if (inverntoryJTable.getColumnModel().getColumnCount() > 0) {
            inverntoryJTable.getColumnModel().getColumn(0).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(1).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(2).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(3).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(4).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(5).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(6).setResizable(false);
            inverntoryJTable.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Footlight MT Light", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inventory Work Area");

        jLabel2.setFont(new java.awt.Font("Californian FB", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Available Inventory");

        deleteJButton.setBackground(new java.awt.Color(255, 138, 138));
        deleteJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        deleteJButton.setText("Delete Batch");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        childJTable.setBackground(new java.awt.Color(255, 203, 203));
        childJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        childJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Vaccine", "Jan", "Feb", "March", "April", "May", "June", "July", "August", "Sept", "Oct", "Nov", "Dec"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(childJTable);
        if (childJTable.getColumnModel().getColumnCount() > 0) {
            childJTable.getColumnModel().getColumn(0).setResizable(false);
            childJTable.getColumnModel().getColumn(1).setResizable(false);
            childJTable.getColumnModel().getColumn(2).setResizable(false);
            childJTable.getColumnModel().getColumn(3).setResizable(false);
            childJTable.getColumnModel().getColumn(4).setResizable(false);
            childJTable.getColumnModel().getColumn(5).setResizable(false);
            childJTable.getColumnModel().getColumn(6).setResizable(false);
            childJTable.getColumnModel().getColumn(7).setResizable(false);
            childJTable.getColumnModel().getColumn(8).setResizable(false);
            childJTable.getColumnModel().getColumn(9).setResizable(false);
            childJTable.getColumnModel().getColumn(10).setResizable(false);
            childJTable.getColumnModel().getColumn(11).setResizable(false);
            childJTable.getColumnModel().getColumn(12).setResizable(false);
        }

        jLabel3.setFont(new java.awt.Font("Californian FB", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Expected Children coming for Vaccine");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteJButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(225, 225, 225))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteJButton)
                    .addComponent(backButton))
                .addGap(51, 51, 51)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(192, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed

        int selectRow = inverntoryJTable.getSelectedRow();

        if (selectRow < 0) {
            JOptionPane.showMessageDialog(null, "please select any row", "WARNING", JOptionPane.WARNING_MESSAGE);

        }

        InventoryItem item = (InventoryItem) inverntoryJTable.getValueAt(selectRow, 0);
        enterprise.getInventoryDirectory().removeItem(item);
        populateinventoryTable();
        JOptionPane.showMessageDialog(null, "Batch Deleted", "WARNING", JOptionPane.WARNING_MESSAGE);

        // TODO add your handling code here:
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable childJTable;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JTable inverntoryJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    
}
